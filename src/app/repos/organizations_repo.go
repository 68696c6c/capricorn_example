// Code generated by "capricorn"; DO NOT EDIT.
package repos

import (
	"github.com/68696c6c/capricorn-example/app/models"

	"github.com/68696c6c/goat"
	"github.com/68696c6c/goat/query"
	"github.com/jinzhu/gorm"
	"github.com/pkg/errors"
)

type OrganizationsRepo interface {
	Save(model *models.Organization) error
	GetById(id goat.ID) (*models.Organization, error)
	Filter(query *query.Query) (result []*models.Organization, err error)
	Delete(model *models.Organization) error
	ApplyPaginationToQuery(query *query.Query) error
}

type OrganizationsRepoGorm struct {
	db *gorm.DB
}

func NewOrganizationsRepo(dbConnection *gorm.DB) OrganizationsRepo {
	return OrganizationsRepoGorm{
		db: dbConnection,
	}
}

func (o OrganizationsRepoGorm) Save(model *models.Organization) error {
	var errs []error
	if model.Model.ID.Valid() {
		errs = o.db.Save(model).GetErrors()
	} else {
		errs = o.db.Create(model).GetErrors()
	}
	if len(errs) > 0 {
		return goat.ErrorsToError(errs)
	}
	return nil
}

func (o OrganizationsRepoGorm) GetById(id goat.ID) (*models.Organization, error) {
	model := &models.Organization{
		Model: goat.Model{
			ID: id,
		},
	}
	errs := o.db.First(model).GetErrors()
	if len(errs) > 0 {
		if goat.RecordNotFound(errs) {
			return nil, gorm.ErrRecordNotFound
		} else {
			return nil, goat.ErrorsToError(errs)
		}
	}
	return model, nil
}

func (o OrganizationsRepoGorm) Filter(query *query.Query) (result []*models.Organization, err error) {
	dataQuery, err := o.getFilteredQuery(query)
	if err != nil {
		return result, errors.Wrap(err, "failed to build filter organizations query")
	}

	errs := dataQuery.Find(&result).GetErrors()
	if len(errs) > 0 && goat.ErrorsBesidesRecordNotFound(errs) {
		err := goat.ErrorsToError(errs)
		return result, errors.Wrap(err, "failed to execute filter organizations data query")
	}

	err = o.ApplyPaginationToQuery(query)
	if err != nil {
		return result, err
	}

	return result, nil
}

func (o OrganizationsRepoGorm) Delete(model *models.Organization) error {
	errs := o.db.Delete(model).GetErrors()
	if len(errs) > 0 {
		return goat.ErrorsToError(errs)
	}
	return nil
}

func (o OrganizationsRepoGorm) ApplyPaginationToQuery(query *query.Query) error {
	err := goat.ApplyPaginationToQuery(query, o.getBaseQuery())
	if err != nil {
		return errors.Wrap(err, "failed to set organizations query pagination")
	}
	return nil
}

func (o OrganizationsRepoGorm) getBaseQuery() *gorm.DB {
	return o.db.Model(&models.Organization{})
}

func (o OrganizationsRepoGorm) getFilteredQuery(query *query.Query) (*gorm.DB, error) {
	result, err := query.ApplyToGorm(o.getBaseQuery())
	if err != nil {
		return result, err
	}
	return result, nil
}
