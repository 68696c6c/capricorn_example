// Code generated by "capricorn"; DO NOT EDIT.
package repos

import (
	"github.com/68696c6c/capricorn-example/app/models"

	"github.com/68696c6c/goat"
	"github.com/68696c6c/goat/query"
	"github.com/jinzhu/gorm"
	"github.com/pkg/errors"
)

type UsersRepo interface {
	Save(model *models.User) error
	GetById(id goat.ID) (*models.User, error)
	Filter(query *query.Query) (result []*models.User, err error)
	Delete(model *models.User) error
	ApplyPaginationToQuery(query *query.Query) error
}

type UsersRepoGorm struct {
	db *gorm.DB
}

func NewUsersRepo(dbConnection *gorm.DB) UsersRepo {
	return UsersRepoGorm{
		db: dbConnection,
	}
}

func (u UsersRepoGorm) Save(model *models.User) error {
	var errs []error
	if model.Model.ID.Valid() {
		errs = u.db.Save(model).GetErrors()
	} else {
		errs = u.db.Create(model).GetErrors()
	}
	if len(errs) > 0 {
		return goat.ErrorsToError(errs)
	}
	return nil
}

func (u UsersRepoGorm) GetById(id goat.ID) (*models.User, error) {
	model := &models.User{
		Model: goat.Model{
			ID: id,
		},
	}
	errs := u.db.First(model).GetErrors()
	if len(errs) > 0 {
		if goat.RecordNotFound(errs) {
			return nil, gorm.ErrRecordNotFound
		} else {
			return nil, goat.ErrorsToError(errs)
		}
	}
	return model, nil
}

func (u UsersRepoGorm) Filter(query *query.Query) (result []*models.User, err error) {
	dataQuery, err := u.getFilteredQuery(query)
	if err != nil {
		return result, errors.Wrap(err, "failed to build filter users query")
	}

	errs := dataQuery.Find(&result).GetErrors()
	if len(errs) > 0 && goat.ErrorsBesidesRecordNotFound(errs) {
		err := goat.ErrorsToError(errs)
		return result, errors.Wrap(err, "failed to execute filter users data query")
	}

	err = u.ApplyPaginationToQuery(query)
	if err != nil {
		return result, err
	}

	return result, nil
}

func (u UsersRepoGorm) Delete(model *models.User) error {
	errs := u.db.Delete(model).GetErrors()
	if len(errs) > 0 {
		return goat.ErrorsToError(errs)
	}
	return nil
}

func (u UsersRepoGorm) ApplyPaginationToQuery(query *query.Query) error {
	err := goat.ApplyPaginationToQuery(query, u.getBaseQuery())
	if err != nil {
		return errors.Wrap(err, "failed to set users query pagination")
	}
	return nil
}

func (u UsersRepoGorm) getBaseQuery() *gorm.DB {
	return u.db.Model(&models.User{})
}

func (u UsersRepoGorm) getFilteredQuery(query *query.Query) (*gorm.DB, error) {
	result, err := query.ApplyToGorm(u.getBaseQuery())
	if err != nil {
		return result, err
	}
	return result, nil
}
