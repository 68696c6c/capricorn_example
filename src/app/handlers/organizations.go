// Code generated by "capricorn"; DO NOT EDIT.
package handlers

import (
	"github.com/68696c6c/capricorn-example/app/models"
	"github.com/68696c6c/capricorn-example/app/repos"

	"github.com/68696c6c/goat"
	"github.com/68696c6c/goat/query"
	"github.com/gin-gonic/gin"
)

type CreateOrganizationRequest struct {
	models.Organization
}

type organizationsResponse struct {
	Data             []*models.Organization `json:"data"`
	query.Pagination `json:"pagination"`
}

type UpdateOrganizationRequest struct {
	models.Organization
}

type organizationResponse struct {
	models.Organization
}

func CreateOrganization(errorHandler goat.ErrorHandler, organizationsRepo repos.OrganizationsRepo) gin.HandlerFunc {
	return func(c *gin.Context) {
		req, ok := goat.GetRequest(c).(*CreateOrganizationRequest)
		if !ok {
			errorHandler.HandleMessage(c, "failed to get request", goat.RespondBadRequestError)
			return
		}

		err := organizationsRepo.Save(&req.Organization)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to save organization", goat.RespondServerError)
			return
		}

		goat.RespondCreated(c, organizationResponse{req.Organization})
	}
}

func ViewOrganization(errorHandler goat.ErrorHandler, organizationsRepo repos.OrganizationsRepo) gin.HandlerFunc {
	return func(c *gin.Context) {
		i := c.Param("id")
		id, err := goat.ParseID(i)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to parse id: "+i, goat.RespondBadRequestError)
			return
		}

		m, err := organizationsRepo.GetById(id)
		if err != nil {
			if goat.IsNotFoundError(err) {
				errorHandler.HandleMessage(c, "organization not found", goat.RespondNotFoundError)
				return
			} else {
				errorHandler.HandleErrorM(c, err, "failed to get organization", goat.RespondServerError)
				return
			}
		}

		goat.RespondData(c, organizationResponse{*m})
	}
}

func ListOrganizations(errorHandler goat.ErrorHandler, organizationsRepo repos.OrganizationsRepo) gin.HandlerFunc {
	return func(c *gin.Context) {
		q := query.NewQueryBuilder(c)

		result, err := organizationsRepo.Filter(q)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to get organizations", goat.RespondServerError)
			return
		}

		err = organizationsRepo.ApplyPaginationToQuery(q)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to count organizations", goat.RespondServerError)
			return
		}

		goat.RespondData(c, organizationsResponse{result, q.Pagination})
	}
}

func UpdateOrganization(errorHandler goat.ErrorHandler, organizationsRepo repos.OrganizationsRepo) gin.HandlerFunc {
	return func(c *gin.Context) {
		i := c.Param("id")
		id, err := goat.ParseID(i)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to parse id: "+i, goat.RespondBadRequestError)
			return
		}

		_, err = organizationsRepo.GetById(id)
		if err != nil {
			if goat.IsNotFoundError(err) {
				errorHandler.HandleMessage(c, "organization not found", goat.RespondNotFoundError)
				return
			} else {
				errorHandler.HandleErrorM(c, err, "failed to get organization", goat.RespondServerError)
				return
			}
		}

		req, ok := goat.GetRequest(c).(*UpdateOrganizationRequest)
		if !ok {
			errorHandler.HandleMessage(c, "failed to get request", goat.RespondBadRequestError)
			return
		}

		err = organizationsRepo.Save(&req.Organization)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to save organization", goat.RespondServerError)
			return
		}

		goat.RespondData(c, organizationResponse{req.Organization})
	}
}

func DeleteOrganization(errorHandler goat.ErrorHandler, organizationsRepo repos.OrganizationsRepo) gin.HandlerFunc {
	return func(c *gin.Context) {
		i := c.Param("id")
		id, err := goat.ParseID(i)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to parse id: "+i, goat.RespondBadRequestError)
			return
		}

		m, err := organizationsRepo.GetById(id)
		if err != nil {
			if goat.IsNotFoundError(err) {
				errorHandler.HandleMessage(c, "organization not found", goat.RespondNotFoundError)
				return
			} else {
				errorHandler.HandleErrorM(c, err, "failed to get organization", goat.RespondServerError)
				return
			}
		}

		err = organizationsRepo.Delete(m)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to delete { .SingleName }}", goat.RespondServerError)
			return
		}

		goat.RespondValid(c)
	}
}
