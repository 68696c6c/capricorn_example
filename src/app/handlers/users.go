// Code generated by "capricorn"; DO NOT EDIT.
package handlers

import (
	"github.com/68696c6c/capricorn-example/app/models"
	"github.com/68696c6c/capricorn-example/app/repos"

	"github.com/68696c6c/goat"
	"github.com/68696c6c/goat/query"
	"github.com/gin-gonic/gin"
)

type CreateUserRequest struct {
	models.User
}

type usersResponse struct {
	Data             []*models.User `json:"data"`
	query.Pagination `json:"pagination"`
}

type UpdateUserRequest struct {
	models.User
}

type userResponse struct {
	models.User
}

func CreateUser(errorHandler goat.ErrorHandler, usersRepo repos.UsersRepo) gin.HandlerFunc {
	return func(c *gin.Context) {
		req, ok := goat.GetRequest(c).(*CreateUserRequest)
		if !ok {
			errorHandler.HandleMessage(c, "failed to get request", goat.RespondBadRequestError)
			return
		}

		err := usersRepo.Save(&req.User)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to save user", goat.RespondServerError)
			return
		}

		goat.RespondCreated(c, userResponse{req.User})
	}
}

func ViewUser(errorHandler goat.ErrorHandler, usersRepo repos.UsersRepo) gin.HandlerFunc {
	return func(c *gin.Context) {
		i := c.Param("id")
		id, err := goat.ParseID(i)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to parse id: "+i, goat.RespondBadRequestError)
			return
		}

		m, err := usersRepo.GetById(id)
		if err != nil {
			if goat.IsNotFoundError(err) {
				errorHandler.HandleMessage(c, "user not found", goat.RespondNotFoundError)
				return
			} else {
				errorHandler.HandleErrorM(c, err, "failed to get user", goat.RespondServerError)
				return
			}
		}

		goat.RespondData(c, userResponse{*m})
	}
}

func ListUsers(errorHandler goat.ErrorHandler, usersRepo repos.UsersRepo) gin.HandlerFunc {
	return func(c *gin.Context) {
		q := query.NewQueryBuilder(c)

		result, err := usersRepo.Filter(q)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to get users", goat.RespondServerError)
			return
		}

		err = usersRepo.ApplyPaginationToQuery(q)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to count users", goat.RespondServerError)
			return
		}

		goat.RespondData(c, usersResponse{result, q.Pagination})
	}
}

func UpdateUser(errorHandler goat.ErrorHandler, usersRepo repos.UsersRepo) gin.HandlerFunc {
	return func(c *gin.Context) {
		i := c.Param("id")
		id, err := goat.ParseID(i)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to parse id: "+i, goat.RespondBadRequestError)
			return
		}

		_, err = usersRepo.GetById(id)
		if err != nil {
			if goat.IsNotFoundError(err) {
				errorHandler.HandleMessage(c, "user not found", goat.RespondNotFoundError)
				return
			} else {
				errorHandler.HandleErrorM(c, err, "failed to get user", goat.RespondServerError)
				return
			}
		}

		req, ok := goat.GetRequest(c).(*UpdateUserRequest)
		if !ok {
			errorHandler.HandleMessage(c, "failed to get request", goat.RespondBadRequestError)
			return
		}

		err = usersRepo.Save(&req.User)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to save user", goat.RespondServerError)
			return
		}

		goat.RespondData(c, userResponse{req.User})
	}
}

func DeleteUser(errorHandler goat.ErrorHandler, usersRepo repos.UsersRepo) gin.HandlerFunc {
	return func(c *gin.Context) {
		i := c.Param("id")
		id, err := goat.ParseID(i)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to parse id: "+i, goat.RespondBadRequestError)
			return
		}

		m, err := usersRepo.GetById(id)
		if err != nil {
			if goat.IsNotFoundError(err) {
				errorHandler.HandleMessage(c, "user not found", goat.RespondNotFoundError)
				return
			} else {
				errorHandler.HandleErrorM(c, err, "failed to get user", goat.RespondServerError)
				return
			}
		}

		err = usersRepo.Delete(m)
		if err != nil {
			errorHandler.HandleErrorM(c, err, "failed to delete { .SingleName }}", goat.RespondServerError)
			return
		}

		goat.RespondValid(c)
	}
}
